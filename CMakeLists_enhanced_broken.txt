cmake_minimum_required(VERSION 3.12)
project(enhanced_fourier_math_cpp)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find required packages
find_package(Python COMPONENTS Interpreter Development REQUIRED)

# Try to find pybind11 via CMake, fallback to pip installation
find_package(pybind11 QUIET)
if(NOT pybind11_FOUND)
    message(STATUS "pybind11 not found, attempting to use pip-installed version")
    execute_process(
        COMMAND ${Python_EXECUTABLE} -c "import pybind11; print(pybind11.get_cmake_dir())"
        OUTPUT_VARIABLE _pybind11_path
        OUTPUT_STRIP_TRAILING_WHITESPACE
        RESULT_VARIABLE _pybind11_result
    )
    if(_pybind11_result EQUAL 0)
        set(pybind11_DIR "${_pybind11_path}")
        find_package(pybind11 REQUIRED)
        message(STATUS "✅ Found pybind11 via pip installation")
    else()
        message(FATAL_ERROR "❌ Could not find pybind11")
    endif()
endif()

# Add optimization flags for Apple Silicon
if(APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -march=native -mtune=native")
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1")
    endif()
endif()

# Add threading support
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")

# Create the enhanced module
pybind11_add_module(enhanced_fourier_math_cpp 
    enhanced_fourier_math.cpp
    enhanced_python_bindings.cpp
)

# Set properties
set_target_properties(enhanced_fourier_math_cpp PROPERTIES
    CXX_VISIBILITY_PRESET "hidden"
    INTERPROCEDURAL_OPTIMIZATION TRUE
)

# Link math library
target_link_libraries(enhanced_fourier_math_cpp PRIVATE m)

# Compiler-specific optimizations
target_compile_definitions(enhanced_fourier_math_cpp PRIVATE VERSION_INFO=${EXAMPLE_VERSION_INFO})
